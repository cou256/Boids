#pragma kernel Initialize
#pragma kernel ForceCompute
#pragma kernel BoidsCompute

#include "UnityCG.cginc"
#include "Boids.cginc"

#define THREADS0 32
#define THREADS1 8

RWStructuredBuffer<TransformStruct> _PredatorBuff;
int _PredatorCount;
float _EscapeRadius;
float _EscapeWeight;

void predatorEscape(
	uint3 Gid : SV_GroupID,
	uint3 DTid : SV_DispatchThreadID,
	uint3 GTid : SV_GroupThreadID,
	uint GI : SV_GroupIndex
) {
	float3 dis = float3(0.0,0.0,0.0);
	int count = 0;
	[loop]
	for(int i = 0; i < _PredatorCount; i++){
		float3 sub = _TransformBuff[DTid.x].translate - _PredatorBuff[i].translate;
		if(length(sub) < _EscapeRadius){
			dis += sub;
			count++;
		}
	}
	if(count > 0){
		float3 force = normalize(dis/count) * _EscapeWeight;
		_TransformBuff[DTid.x].velocity += force * unity_DeltaTime.x;
	}
}
[numthreads(THREADS0, 1, 1)]
void Initialize (
	uint3 Gid : SV_GroupID,
	uint3 DTid : SV_DispatchThreadID,
	uint3 GTid : SV_GroupThreadID,
	uint GI : SV_GroupIndex
) {
	initialize(Gid, DTid, GTid, GI);
}
[numthreads(THREADS1, THREADS1, 1)]
void ForceCompute (
	uint3 Gid : SV_GroupID,
	uint3 DTid : SV_DispatchThreadID,
	uint3 GTid : SV_GroupThreadID,
	uint GI : SV_GroupIndex
) {
	forceCompute(Gid, DTid, GTid, GI);
}
[numthreads(THREADS0, 1, 1)]
void BoidsCompute(
	uint3 Gid : SV_GroupID,
	uint3 DTid : SV_DispatchThreadID,
	uint3 GTid : SV_GroupThreadID,
	uint GI : SV_GroupIndex
){
	predatorEscape(Gid, DTid, GTid, GI);
	boidsCompute(Gid, DTid, GTid, GI);
}
